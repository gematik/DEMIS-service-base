package de.gematik.demis.service.base.security.jwt;

/*-
 * #%L
 * service-base
 * %%
 * Copyright (C) 2025 gematik GmbH
 * %%
 * Licensed under the EUPL, Version 1.2 or - as soon they will be approved by the
 * European Commission â€“ subsequent versions of the EUPL (the "Licence").
 * You may not use this work except in compliance with the Licence.
 *
 * You find a copy of the Licence in the "Licence" file or at
 * https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
 * In case of changes by gematik find details in the "Readme" file.
 *
 * See the Licence for the specific language governing permissions and limitations under the Licence.
 *
 * *******
 *
 * For additional notes and disclaimer from gematik and in case of changes by gematik find details in the "Readme" file.
 * #L%
 */

import java.util.function.Supplier;
import org.springframework.http.HttpHeaders;

/**
 * A factory class responsible for creating instances of {@link Token}.
 *
 * <p>This class implements the {@link Supplier} interface to provide a uniform way to generate
 * tokens from different sources, such as HTTP headers or an authorization header string. It
 * delegates token creation to an underlying {@link Supplier<Token>} implementation.
 */
public final class TokenFactory implements Supplier<Token> {

  private final Supplier<Token> factory;

  private TokenFactory(Supplier<Token> factory) {
    this.factory = factory;
  }

  /**
   * Constructs a {@link TokenFactory} that creates tokens using the provided {@link HttpHeaders}.
   *
   * @param headers the HTTP headers containing token-related information.
   */
  public TokenFactory(HttpHeaders headers) {
    this(new HttpHeadersTokenFactory(headers));
  }

  /**
   * Constructs a {@link TokenFactory} that creates tokens using the provided authorization header.
   *
   * @param authorizationHeader the authorization header containing the token.
   */
  public TokenFactory(String authorizationHeader) {
    this(new AuthorizationHeaderTokenFactory(authorizationHeader));
  }

  /**
   * Retrieves a {@link Token} instance generated by the underlying factory.
   *
   * @return a {@link Token} instance.
   */
  @Override
  public Token get() {
    return factory.get();
  }
}
